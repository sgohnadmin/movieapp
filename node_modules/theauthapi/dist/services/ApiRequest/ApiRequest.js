"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const libraryMeta_1 = require("../../libraryMeta");
const ApiRequestError_1 = __importDefault(require("./ApiRequestError"));
const axios_retry_1 = __importDefault(require("axios-retry"));
const ApiResponseError_1 = __importDefault(require("./ApiResponseError"));
class ApiRequest {
    constructor(config) {
        const { host, accessKey, headers, retryCount } = config;
        this.host = host;
        this.accessKey = accessKey;
        this.headers = this._generateDefaultHeaders();
        this.retryCount = retryCount !== null && retryCount !== void 0 ? retryCount : 3;
        if (headers) {
            this.headers = Object.assign(Object.assign({}, this.headers), { headers });
        }
        this._init();
    }
    _init() {
        var _a;
        const isoDateFormat = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:\.\d*)?(?:[-+]\d{2}:?\d{2}|Z)?$/;
        function isIsoDateString(value) {
            return value && typeof value === "string" && isoDateFormat.test(value);
        }
        function handleDates(body) {
            if (body === null || body === undefined || typeof body !== "object") {
                return body;
            }
            for (const key of Object.keys(body)) {
                const value = body[key];
                if (isIsoDateString(value)) {
                    body[key] = new Date(value);
                }
                else if (typeof value === "object") {
                    handleDates(value);
                }
            }
        }
        axios_1.default.interceptors.response.use((response) => {
            handleDates(response.data);
            return response;
        });
        (0, axios_retry_1.default)(axios_1.default, {
            retries: (_a = this.retryCount) !== null && _a !== void 0 ? _a : 3,
            retryCondition: this._isErrorRetryable,
            retryDelay: axios_retry_1.default.exponentialDelay,
        });
    }
    request(method, endpoint, payload) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield axios_1.default.request({
                    baseURL: this.host,
                    method: method,
                    url: endpoint,
                    data: payload,
                    headers: this.headers,
                });
                return response.data;
            }
            catch (error) {
                if (axios_1.default.isAxiosError(error)) {
                    if (error.response) {
                        throw new ApiResponseError_1.default(error.response.status, (_a = error.response.data.message) !== null && _a !== void 0 ? _a : error.response.statusText);
                    }
                    else if (error.request) {
                        throw new ApiRequestError_1.default(error.message);
                    }
                }
                throw error;
            }
        });
    }
    _generateDefaultHeaders() {
        return {
            "user-agent": `theauthapi-client-node/${libraryMeta_1.version}`,
            "x-api-key": this.accessKey,
            "api-key": this.accessKey,
        };
    }
    _isErrorRetryable(error) {
        // Retry Network Errors.
        if (axios_retry_1.default.isNetworkError(error)) {
            return true;
        }
        if (!error.response) {
            // Cannot determine if the request can be retried
            return false;
        }
        // Retry Server Errors (5xx).
        if (error.response.status >= 500 && error.response.status <= 599) {
            return true;
        }
        // Retry if rate limited.
        if (error.response.status === 429) {
            return true;
        }
        return false;
    }
}
exports.default = ApiRequest;
