"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const HttpMethod_1 = require("../../services/ApiRequest/HttpMethod");
const ApiResponseError_1 = __importDefault(require("../../services/ApiRequest/ApiResponseError"));
class ApiKeys {
    constructor(apiService) {
        this.api = apiService;
        this.endpoint = "/api-keys/";
    }
    isValidKey(apikey) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const key = yield this.authenticateKey(apikey);
                return key.key !== undefined;
            }
            catch (error) {
                if (error instanceof ApiResponseError_1.default && error.statusCode === 404) {
                    return false;
                }
                throw error;
            }
        });
    }
    authenticateKey(apikey) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.api.request(HttpMethod_1.HttpMethod.POST, `/api-keys/auth/${apikey}`);
        });
    }
    getKeys(filter) {
        return __awaiter(this, void 0, void 0, function* () {
            const endpoint = this.getKeysFilterEndpoint(filter);
            return yield this.api.request(HttpMethod_1.HttpMethod.GET, endpoint);
        });
    }
    getKey(apikey) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.api.request(HttpMethod_1.HttpMethod.GET, `/api-keys/${apikey}`);
        });
    }
    createKey(apiKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.api.request(HttpMethod_1.HttpMethod.POST, "/api-keys", apiKey);
        });
    }
    updateKey(apiKey, updatedKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.api.request(HttpMethod_1.HttpMethod.PATCH, `/api-keys/${apiKey}`, updatedKey);
        });
    }
    deleteKey(apiKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.api.request(HttpMethod_1.HttpMethod.DELETE, `/api-keys/${apiKey}`);
        });
    }
    reactivateKey(apiKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.api.request(HttpMethod_1.HttpMethod.PATCH, `/api-keys/${apiKey}/reactivate`);
        });
    }
    rotateKey(apiKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.api.request(HttpMethod_1.HttpMethod.POST, `/api-keys/${apiKey}/rotate`);
        });
    }
    getKeysFilterEndpoint(filter) {
        let filters = [];
        if (filter !== undefined) {
            filters = Object.entries(filter).map(([key, value]) => `${key}=${value}`);
        }
        return `${this.endpoint}${filter !== undefined ? "?" : ""}${filters.join("&")}`;
    }
}
exports.default = ApiKeys;
