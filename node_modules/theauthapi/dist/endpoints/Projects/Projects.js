"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const HttpMethod_1 = require("../../services/ApiRequest/HttpMethod");
class Projects {
    constructor(apiService) {
        this.api = apiService;
        this.endpoint = "/projects";
    }
    getProjects(accountId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.api.request(HttpMethod_1.HttpMethod.GET, `${this.endpoint}?accountId=${accountId}`);
        });
    }
    getProject(projectId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.api.request(HttpMethod_1.HttpMethod.GET, `${this.endpoint}/${projectId}`);
        });
    }
    deleteProject(projectId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.api.request(HttpMethod_1.HttpMethod.DELETE, `${this.endpoint}/${projectId}`);
        });
    }
    createProject(project) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.api.request(HttpMethod_1.HttpMethod.POST, this.endpoint, project);
        });
    }
    updateProject(projectId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.api.request(HttpMethod_1.HttpMethod.PATCH, `${this.endpoint}/${projectId}`, project);
        });
    }
}
exports.default = Projects;
